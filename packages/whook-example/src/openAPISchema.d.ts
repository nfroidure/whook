// This file is autogenerated by Whook
// Do not try to change it in place
/* eslint-disable @typescript-eslint/ban-types */
declare interface paths {
  '/delay': {
    get: operations['getDelay'];
  };
  '/diagnostic': {
    get: operations['getDiagnostic'];
  };
  '/openAPI': {
    get: operations['getOpenAPI'];
  };
  '/{pathParam1}/{pathParam2}': {
    get: operations['getParameters'];
  };
  '/time': {
    get: operations['getTime'];
    put: operations['putTime'];
  };
  '/echo': {
    put: operations['putEcho'];
  };
  '/stream': {
    put: operations['putEchoedStream'];
  };
  '/ping': {
    get: operations['getPing'];
  };
}
declare interface operations {
  postDelayCallback: {
    responses: {
      204: object;
    };
    parameters: {
      query: {
        duration: components['parameters']['duration'];
      };
    };
  };
  getDelay: {
    callbacks: {
      DelayCallback: components['callbacks']['DelayCallback'];
    };
    responses: {
      204: object;
    };
    parameters: {
      query: {
        duration: components['parameters']['duration'];
        callbackUrl?: string;
      };
    };
  };
  getDiagnostic: {
    responses: {
      200: components['responses']['Diagnostic'];
    };
  };
  getOpenAPI: {
    responses: {
      200: {
        body: object;
      };
    };
  };
  getParameters: {
    responses: {
      200: {
        body: {
          aHeader?: boolean;
          aMultiHeader?: [number, number];
          pathParam1?: number;
          pathParam2?: string;
          queryParam?: string[];
        };
      };
    };
    parameters: {
      path: {
        pathParam1: components['parameters']['pathParam1'];
        pathParam2: components['parameters']['pathParam2'];
      };
      query: {
        queryParam: components['parameters']['queryParam'];
      };
      headers: {
        'a-header'?: boolean;
        aMultiHeader?: number[];
      };
    };
  };
  getTime: {
    responses: {
      200: {
        body: components['schemas']['TimeSchema'];
      };
    };
  };
  putTime: {
    requestBody: {
      time: number;
      isFixed?: boolean;
    };
    responses: {
      201: {
        body: number;
      };
    };
  };
  putEcho: {
    requestBody: components['requestBodies']['Echo'];
    responses: {
      200: components['responses']['Echo'];
    };
  };
  putEchoedStream: {
    requestBody: components['requestBodies']['Stream'];
    responses: {
      201: components['responses']['Stream'];
    };
  };
  getPing: {
    responses: {
      200: {
        body: {
          pong?: 'pong';
        };
      };
    };
  };
}
declare interface components {
  callbacks: {
    DelayCallback: {
      '{$request.query.callbackUrl}': {
        post: operations['postDelayCallback'];
      };
    };
  };
  parameters: {
    duration: number;
    pathParam1: number;
    pathParam2: string;
    queryParam: string[];
  };
  responses: {
    Diagnostic: {
      body: {
        transactions: {
          [pattern: string]: unknown;
        };
      };
    };
    Echo: {
      body: components['schemas']['Echo'];
    };
    Stream: {
      body: components['schemas']['Stream'];
    };
  };
  requestBodies: {
    Echo: components['schemas']['Echo'];
    Stream: components['schemas']['Stream'];
  };
  schemas: {
    TimeSchema: {
      currentDate?: string;
    };
    Echo: {
      echo: string;
    };
    Stream: NodeJS.ReadableStream;
    ExampleSchema: {
      message?: string;
      delay?: number;
    };
  };
}
