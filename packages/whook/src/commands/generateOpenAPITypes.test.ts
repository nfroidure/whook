import { describe, it, beforeEach, jest, expect } from '@jest/globals';
import initGenerateOpenAPITypes from './generateOpenAPITypes.js';
import { PassThrough } from 'node:stream';
import { definition as initGetPingDefinition } from '../handlers/getPing.js';
import { type OpenAPITypesGenerationOptions } from 'schema2dts';
import { type OpenAPIV3_1 } from 'openapi-types';
import { type LogService } from 'common-services';

describe('generateOpenAPITypes', () => {
  const getOpenAPI = jest.fn();
  const log = jest.fn<LogService>();
  const OPEN_API_TYPES_CONFIG: OpenAPITypesGenerationOptions = {
    baseName: 'API',
    generateUnusedSchemas: true,
    generateRealEnums: false,
    exportNamespaces: false,
    brandedTypes: [],
    tuplesFromFixedArraysLengthLimit: 5,
  };
  const API: OpenAPIV3_1.Document = {
    openapi: '3.1.0',
    info: {
      version: '1.0.0',
      title: 'Sample OpenAPI',
      description: 'A sample OpenAPI file for testing purpose.',
    },
    paths: {
      [initGetPingDefinition.path]: {
        [initGetPingDefinition.method]: initGetPingDefinition.operation,
      },
    },
  };

  beforeEach(() => {
    getOpenAPI.mockReset();
    log.mockReset();
  });

  it('should work', async () => {
    const instream = new PassThrough();
    const outstream = new PassThrough();
    const outputPromise = new Promise((resolve, reject) => {
      let buffer = Buffer.from('');
      outstream.on('data', (aBuffer) => {
        buffer = Buffer.concat([buffer, aBuffer]);
      });
      outstream.once('error', () => reject);
      outstream.once('end', () => resolve(buffer.toString()));
    });
    const generateOpenAPITypes = await initGenerateOpenAPITypes({
      OPEN_API_TYPES_CONFIG,
      instream,
      outstream,
      log,
    });

    const resultPromise = generateOpenAPITypes();

    instream.write(JSON.stringify(API));
    instream.end();

    expect({
      result: await resultPromise,
      output: await outputPromise,
      getOpenAPICalls: getOpenAPI.mock.calls,
      logCalls: log.mock.calls.filter(([type]) => !type.endsWith('stack')),
    }).toMatchInlineSnapshot(
      {},
      `
{
  "getOpenAPICalls": [],
  "logCalls": [
    [
      "warning",
      "ðŸ“¥ - Retrieving API schema...",
    ],
    [
      "warning",
      "ðŸ“‡ - Writing types...",
    ],
  ],
  "output": "// This file is autogenerated by Whook
// Do not try to change it in place
/* eslint-disable @typescript-eslint/ban-types */
declare namespace API {
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getPingResponse200<200>;
        }
    }
}
declare namespace Components {
    export namespace Responses {
        export type getPingResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPingResponse200Body0;
        };
    }
    export namespace Schemas {
        export type ResponsesgetPingResponse200Body0 = {
            pong?: "pong";
        };
    }
}",
  "result": undefined,
}
`,
    );
  });
});
